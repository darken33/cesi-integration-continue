/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.sqli.workshop.ddd.connaissance.client.generated.api.server;

import com.sqli.workshop.ddd.connaissance.client.generated.api.model.ApiErrorResponseDto;
import com.sqli.workshop.ddd.connaissance.client.generated.api.model.ConnaissanceClientDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
@Api(value = "connaissanceClientAS", description = "the connaissanceClientAS API")
public interface ConnaissanceClientASApi {

    default ConnaissanceClientASApiDelegate getDelegate() {
        return new ConnaissanceClientASApiDelegate() {};
    }

    @ApiOperation(value = "Accès en écriture à une fiche de connaissance client", nickname = "saveConnaissanceClientAsync", notes = "Ecriture d'une fiche de connaissance client en assynchrone. ", response = ApiErrorResponseDto.class, authorizations = {
        @Authorization(value = "Authorization")
    }, tags={ "connaissanceclient-api-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Réponse pour une requête valide (création ou mise à jour d'une fiche de connaissance client)", response = ApiErrorResponseDto.class),
        @ApiResponse(code = 400, message = "Invalid Request", response = ApiErrorResponseDto.class),
        @ApiResponse(code = 401, message = "Access forbidden", response = ApiErrorResponseDto.class),
        @ApiResponse(code = 403, message = "Access denied", response = ApiErrorResponseDto.class),
        @ApiResponse(code = 409, message = "Conflict", response = ApiErrorResponseDto.class) })
    @RequestMapping(value = "/connaissanceClientAS",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ApiErrorResponseDto> saveConnaissanceClientAsync(@ApiParam(value = "La fiche de connaissance client à enregister"  )  @Valid @RequestBody ConnaissanceClientDto connaissanceClientDto) {
        return getDelegate().saveConnaissanceClientAsync(connaissanceClientDto);
    }

}
