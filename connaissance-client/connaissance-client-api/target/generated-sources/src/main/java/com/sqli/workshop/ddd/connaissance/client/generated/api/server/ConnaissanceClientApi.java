/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.sqli.workshop.ddd.connaissance.client.generated.api.server;

import com.sqli.workshop.ddd.connaissance.client.generated.api.model.AdresseDto;
import com.sqli.workshop.ddd.connaissance.client.generated.api.model.ApiErrorResponseDto;
import com.sqli.workshop.ddd.connaissance.client.generated.api.model.ConnaissanceClientDto;
import com.sqli.workshop.ddd.connaissance.client.generated.api.model.SituationDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
@Api(value = "connaissanceClient", description = "the connaissanceClient API")
public interface ConnaissanceClientApi {

    default ConnaissanceClientApiDelegate getDelegate() {
        return new ConnaissanceClientApiDelegate() {};
    }

    @ApiOperation(value = "Changement d'addresse du client", nickname = "changerAdresse", notes = "Changement d'addresse du client ", response = ConnaissanceClientDto.class, authorizations = {
        @Authorization(value = "Authorization")
    }, tags={ "connaissanceclient-api-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Réponse pour une requête valide (retour d'une fiche de connaissance client)", response = ConnaissanceClientDto.class),
        @ApiResponse(code = 400, message = "Invalid Request", response = ApiErrorResponseDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ApiErrorResponseDto.class),
        @ApiResponse(code = 500, message = "Unexpected server error", response = ApiErrorResponseDto.class) })
    @RequestMapping(value = "/connaissanceClient/{id}/adresse",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<ConnaissanceClientDto> changerAdresse(@ApiParam(value = "identifiant",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody AdresseDto adresseDto) {
        return getDelegate().changerAdresse(id, adresseDto);
    }


    @ApiOperation(value = "Changement d'addresse du client", nickname = "changerSituation", notes = "Changement d'addresse du client ", response = ConnaissanceClientDto.class, authorizations = {
        @Authorization(value = "Authorization")
    }, tags={ "connaissanceclient-api-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Réponse pour une requête valide (retour d'une fiche de connaissance client)", response = ConnaissanceClientDto.class),
        @ApiResponse(code = 400, message = "Invalid Request", response = ApiErrorResponseDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ApiErrorResponseDto.class),
        @ApiResponse(code = 500, message = "Unexpected server error", response = ApiErrorResponseDto.class) })
    @RequestMapping(value = "/connaissanceClient/{id}/situation",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<ConnaissanceClientDto> changerSituation(@ApiParam(value = "identifiant",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody SituationDto situationDto) {
        return getDelegate().changerSituation(id, situationDto);
    }


    @ApiOperation(value = "Accès en lecture à une fiche de connaissance client", nickname = "getConnaissanceClient", notes = "Accès à une fiche de connaissance client via son id ", response = ConnaissanceClientDto.class, authorizations = {
        @Authorization(value = "Authorization")
    }, tags={ "connaissanceclient-api-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Réponse pour une requête valide (retour d'une fiche de connaissance client)", response = ConnaissanceClientDto.class),
        @ApiResponse(code = 400, message = "Invalid Request", response = ApiErrorResponseDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ApiErrorResponseDto.class),
        @ApiResponse(code = 500, message = "Unexpected server error", response = ApiErrorResponseDto.class) })
    @RequestMapping(value = "/connaissanceClient/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ConnaissanceClientDto> getConnaissanceClient(@ApiParam(value = "identifiant",required=true) @PathVariable("id") String id) {
        return getDelegate().getConnaissanceClient(id);
    }


    @ApiOperation(value = "Liste des fiches de connaissance client", nickname = "getConnaissanceClients", notes = "liste des fiches de connaissance client ", response = ConnaissanceClientDto.class, responseContainer = "List", authorizations = {
        @Authorization(value = "Authorization")
    }, tags={ "connaissanceclient-api-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Réponse pour une requête valide", response = ConnaissanceClientDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid Request", response = ApiErrorResponseDto.class),
        @ApiResponse(code = 401, message = "Access forbidden", response = ApiErrorResponseDto.class),
        @ApiResponse(code = 403, message = "Access denied", response = ApiErrorResponseDto.class),
        @ApiResponse(code = 409, message = "Conflict", response = ApiErrorResponseDto.class) })
    @RequestMapping(value = "/connaissanceClient",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ConnaissanceClientDto>> getConnaissanceClients() {
        return getDelegate().getConnaissanceClients();
    }


    @ApiOperation(value = "Accès en écriture à une fiche de connaissance client", nickname = "saveConnaissanceClient", notes = "Ecriture d'une fiche de connaissance client (création ou mise à jour). ", response = ConnaissanceClientDto.class, authorizations = {
        @Authorization(value = "Authorization")
    }, tags={ "connaissanceclient-api-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Réponse pour une requête valide (création ou mise à jour d'une fiche de connaissance client)", response = ConnaissanceClientDto.class),
        @ApiResponse(code = 400, message = "Invalid Request", response = ApiErrorResponseDto.class),
        @ApiResponse(code = 401, message = "Access forbidden", response = ApiErrorResponseDto.class),
        @ApiResponse(code = 403, message = "Access denied", response = ApiErrorResponseDto.class),
        @ApiResponse(code = 409, message = "Conflict", response = ApiErrorResponseDto.class) })
    @RequestMapping(value = "/connaissanceClient",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ConnaissanceClientDto> saveConnaissanceClient(@ApiParam(value = "La fiche de connaissance client à enregister"  )  @Valid @RequestBody ConnaissanceClientDto connaissanceClientDto) {
        return getDelegate().saveConnaissanceClient(connaissanceClientDto);
    }

}
